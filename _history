{"entries":[{"timestamp":1727520687909,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables><variable id=\"dNkE/,}ct[2SX|~~b3NV\">direction</variable><variable id=\"B,p_FAU1.d}hsy9iUg.:\">y</variable><variable id=\"?U[;*ofa9TFn~PK/;CV$"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\">"],[-1,"x"],[0,"</"],[-1,"variable><variable id=\"N(*@J*hhEXNg(oV+}KK$\">N</variable><variable id=\"(-Es^YolIaUN3L^SzL~d\">room</variable><variable id=\"bS!]rXom.pNjnZtN)_hF\">row</variable></variables><comment id=\"?J}mWf2}Y/evj]VdHrh~\" x=\"638\" y=\"1646\" w=\"450\" h=\"120\">\nMapa de la habitación (0 = sucia, 1 = limpia)\n</comment>"],[1,"block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":496,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/** Mapa de la habitación (0 = sucia, 1 = limpia) */\n//  Verificar si toda la habitación está limpia\nfunction is_room_clean(): boolean {\n    for (let row of room) {\n        if (row.indexOf(0) != -1) {\n            return false\n        }\n        \n    }\n    return true\n}\n\n//  Función para detectar obstáculos usando ultrasonido\nfunction detect_obstacle(): boolean {\n    //  Si hay un obstáculo a menos de 10 cm, devuelve verdadero\n    if (maqueen.Ultrasonic(PingUnit.Centimeters) < 10) {\n        return true\n    }\n    \n    return false\n}\n\n//  Función para mover hacia adelante\nfunction move_forward() {\n    \n    //  Mueve físicamente el robot\n    maqueen.motorRun(maqueen.Motors.All, maqueen.Dir.CW, 100)\n    //  Tiempo para que avance una celda\n    basic.pause(1000)\n    //  Actualizar la posición (según la dirección)\n    if (direction == 0 && y > 0) {\n        //  Norte\n        y += 0 - 1\n    } else if (direction == 1 && x < N - 1) {\n        //  Este\n        x += 1\n    } else if (direction == 2 && y < N - 1) {\n        //  Sur\n        y += 1\n    } else if (direction == 3 && x > 0) {\n        //  Oeste\n        x += 0 - 1\n    }\n    \n}\n\n//  Función para girar 90 grados a la derecha\nfunction turn_right() {\n    \n    maqueen.motorRun(maqueen.Motors.M1, maqueen.Dir.CW, 100)\n    maqueen.motorRun(maqueen.Motors.M2, maqueen.Dir.CCW, 100)\n    //  Tiempo para girar\n    basic.pause(1000)\n    //  Actualiza la dirección\n    direction = (direction + 1) % 4\n}\n\nlet direction = 0\nlet x = 0\nlet y = 0\nlet room : number[][] = []\nlet N = 0\nN = 5\nfor (let index = 0; index < N; index++) {\n    room.push([0, 0, 0, 0, 0])\n}\n//  Bucle principal\nwhile (!is_room_clean()) {\n    //  Si el robot detecta un obstáculo, gira\n    if (detect_obstacle()) {\n        turn_right()\n    } else {\n        //  Si no hay obstáculos, avanza y limpia la celda\n        move_forward()\n        //  Marca la celda como limpia\n        //  Marca la celda como limpia\n        room[y][x] = 1\n    }\n    \n    //  Si el robot llega a un borde, gira\n    if (x == 0 || x == N - 1 || y == 0 || y == N - 1) {\n        turn_right()\n    }\n    \n}\n//  Regresa al punto de inicio (0, 0)\nwhile (x != 0 || y != 0) {\n    if (x > 0) {\n        x += 0 - 1\n    } else if (x < 0) {\n        x += 1\n    } else if (y > 0) {\n        y += 0 - 1\n    } else if (y < 0) {\n        y += 1\n    }\n    \n}"],[0,"\n"]],"start1":0,"start2":0,"length1":2329,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"maqueen\": \"github:dfrobot/pxt-maqueen#v1.7.2\""],[0,"\n   "]],"start1":142,"start2":142,"length1":64,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":226,"start2":226,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// aquí va el archivo \"tests\"; esto no se compilará cuando este paquete se utilice como una extensión.\n"},{"type":"added","filename":"main.py","value":"\"\"\"\n\nMapa de la habitación (0 = sucia, 1 = limpia)\n\n\"\"\"\n# Verificar si toda la habitación está limpia\ndef is_room_clean():\n    for row in room:\n        if row.index_of(0) != -1:\n            return False\n    return True\n# Función para detectar obstáculos usando ultrasonido\ndef detect_obstacle():\n    # Si hay un obstáculo a menos de 10 cm, devuelve verdadero\n    if maqueen.ultrasonic(PingUnit.CENTIMETERS) < 10:\n        return True\n    return False\n# Función para mover hacia adelante\ndef move_forward():\n    global y, x\n    # Mueve físicamente el robot\n    maqueen.motor_run(maqueen.Motors.ALL, maqueen.Dir.CW, 100)\n    # Tiempo para que avance una celda\n    basic.pause(1000)\n    # Actualizar la posición (según la dirección)\n    if direction == 0 and y > 0:\n        # Norte\n        y += 0 - 1\n    elif direction == 1 and x < N - 1:\n        # Este\n        x += 1\n    elif direction == 2 and y < N - 1:\n        # Sur\n        y += 1\n    elif direction == 3 and x > 0:\n        # Oeste\n        x += 0 - 1\n# Función para girar 90 grados a la derecha\ndef turn_right():\n    global direction\n    maqueen.motor_run(maqueen.Motors.M1, maqueen.Dir.CW, 100)\n    maqueen.motor_run(maqueen.Motors.M2, maqueen.Dir.CCW, 100)\n    # Tiempo para girar\n    basic.pause(1000)\n    # Actualiza la dirección\n    direction = (direction + 1) % 4\ndirection = 0\nx = 0\ny = 0\nroom: List[List[number]] = []\nN = 0\nN = 5\nfor index in range(N):\n    room.append([0, 0, 0, 0, 0])\n# Bucle principal\nwhile not (is_room_clean()):\n    # Si el robot detecta un obstáculo, gira\n    if detect_obstacle():\n        turn_right()\n    else:\n        # Si no hay obstáculos, avanza y limpia la celda\n        move_forward()\n        # Marca la celda como limpia\n        # Marca la celda como limpia\n        room[y][x] = 1\n    # Si el robot llega a un borde, gira\n    if x == 0 or x == N - 1 or y == 0 or y == N - 1:\n        turn_right()\n# Regresa al punto de inicio (0, 0)\nwhile x != 0 or y != 0:\n    if x > 0:\n        x += 0 - 1\n    elif x < 0:\n        x += 1\n    elif y > 0:\n        y += 0 - 1\n    elif y < 0:\n        y += 1"}]}],"snapshots":[{"timestamp":1727520687908,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ROBOT LIMPIADOR\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1727520804252}